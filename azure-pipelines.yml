# Gradle
# Build your Java project and run tests with Gradle using a Gradle wrapper script.
# Add steps that analyze code, save build artifacts, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/java
trigger:
  - main

variables:
  ANDROID_EMU_NAME: test
  ANDROID_EMU_ABI: x86
  ANDROID_EMU_TARGET: android-28
  ANDROID_EMU_TAG: default
  XCODE_VERSION: 14.2
  IOS_PLATFORM_VERSION: 16.2
  IOS_DEVICE_NAME: iPhone 12
  NODE_VERSION: 18.x
  JDK_VERSION: 1.8

jobs:
  - job: Android_E2E_Tests
    pool:
      vmImage: 'macOS-latest'
    steps:
      - template: .azure-template/bootstrap.yml
      - script: $NVM_DIR/versions/node/`node --version`/bin/appium driver install uiautomator2
        displayName: Install UIA2 driver
      - script: |
          echo "y" | $ANDROID_HOME/tools/bin/sdkmanager --install 'system-images;$(ANDROID_EMU_TARGET);$(ANDROID_EMU_TAG);$(ANDROID_EMU_ABI)'
          echo "no" | $ANDROID_HOME/tools/bin/avdmanager create avd -n "$(ANDROID_EMU_NAME)" -k 'system-images;$(ANDROID_EMU_TARGET);$(ANDROID_EMU_TAG);$(ANDROID_EMU_ABI)' --force
          echo $ANDROID_HOME/emulator/emulator -list-avds

          echo "Starting emulator"
          nohup $ANDROID_HOME/emulator/emulator -avd "$(ANDROID_EMU_NAME)" -no-snapshot -delay-adb > /dev/null 2>&1 &
          $ANDROID_HOME/platform-tools/adb wait-for-device
          $ANDROID_HOME/platform-tools/adb devices -l
          echo "Emulator started"
        displayName: Emulator configuration
      - script: |
          npm ci
          $NVM_DIR/versions/node/$(node --version)/bin/appium plugin install --source=local .          
          nohup $NVM_DIR/versions/node/$(node --version)/bin/appium server -ka 800 --use-plugins=gestures -pa /wd/hub &
          $NVM_DIR/versions/node/$(node --version)/bin/wait-on http://127.0.0.1:4723/wd/hub/status
          PLATFORM=android npm run test-e2e
        displayName: Android E2E Test
